Step-by-Step Guide for Setting Up a Node.js Project with SQL Server Integration
1. Install Node.js
Download the latest version of Node.js from the official website.
Follow the installation instructions specific to your operating system.
2. Create a New Node.js Project
Open your terminal or command prompt.
Navigate to the directory where you want to create your project.
Run the following command to create a new directory and navigate into it:
bash
Copy code
mkdir sql-api-server
cd sql-api-server
3. Initialize the Project
Run the following command to create a package.json file:
bash
Copy code
npm init -y
This will create a package.json file with default settings.
4. Install Required Packages
Install Express, Axios, and mssql packages by running:
bash
Copy code
npm install express axios mssql body-parser
This will create a node_modules directory containing the installed packages and update the package.json file with dependencies.
5. Create index.js File
In your project directory, create a file named index.js:
bash
Copy code
touch index.js
Open index.js in your code editor (e.g., VSCode, PyCharm, etc.) and add the following code:
javascript
Copy code
const express = require("express");
const bodyParser = require("body-parser");
const sql = require("mssql");

const app = express();
const port = 3000;

// Middleware to parse JSON requests
app.use(bodyParser.json());

const sqlConfig = {
  server: 'localhost',
  port: 1433,
  database: 'Customer', // Your actual database name
  options: {
    encrypt: false,
    trustServerCertificate: true,
  },
  authentication: {
    type: 'default',
    options: {
      userName: 'sqldb',
      password: 'testing',
    }
  }
};

// Connect to SQL Server
sql.connect(sqlConfig)
  .then(() => {
    console.log("Connected to SQL Server");
  })
  .catch((err) => {
    console.log("Database Connection Failed: ", err);
  });

// GET, POST, PUT, DELETE routes (as described previously)

// Start the server
app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});
6. SQL Server Management Studio (SSMS) Configuration
Open SSMS and connect to your SQL Server instance.
Create a new database named Customer:
sql
Copy code
CREATE DATABASE Customer;
Switch to the Customer database:
sql
Copy code
USE Customer;
Create a new table named Customer:
sql
Copy code
CREATE TABLE dbo.Customer (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    FirstName NVARCHAR(50),
    LastName NVARCHAR(50),
    Address NVARCHAR(255),
    Profile NVARCHAR(255),
    Occupation NVARCHAR(100),
    PhoneNumber NVARCHAR(15),
    Email NVARCHAR(100),
    CreatedAt DATETIME DEFAULT GETDATE()
);
7. Insert Sample Data into the Table
Insert sample data into the Customer table:
sql
Copy code
INSERT INTO dbo.Customer (FirstName, LastName, Address, Profile, Occupation, PhoneNumber, Email)
VALUES
('John', 'Doe', '123 Elm St', 'Profile Info', 'Software Engineer', '123-456-7890', 'john.doe@example.com'),
('Jane', 'Smith', '456 Oak Ave', 'Profile Info', 'Data Scientist', '234-567-8901', 'jane.smith@example.com');
8. Running the Node.js Server
In the terminal, navigate to the project directory and run:
bash
Copy code
node index.js
You should see a message indicating that the server is running.
9. Using Postman for API Requests
Download and install Postman from the official website.

Open Postman and create a new request.

GET Request:

Set the request type to GET.
Enter the URL: http://localhost:3000/api/customers.
Click Send to fetch all customers.
POST Request:

Set the request type to POST.
Enter the URL: http://localhost:3000/api/customers.
Set the header: Content-Type: application/json.
In the body, use the following JSON:
json
Copy code
{
  "FirstName": "John",
  "LastName": "Doe",
  "Address": "123 Elm St",
  "Profile": "Profile Info",
  "Occupation": "Software Engineer",
  "PhoneNumber": "123-456-7890",
  "Email": "john.doe@example.com"
}
Click Send to create a new customer.
PUT Request:

Set the request type to PUT.
Enter the URL: http://localhost:3000/api/customers/1.
Set the header: Content-Type: application/json.
In the body, use the following JSON to update the customer:
json
Copy code
{
  "FirstName": "UpdatedFirstName",
  "LastName": "UpdatedLastName",
  "Address": "Updated Address, New City, New State",
  "Profile": "Updated Profile Info",
  "Occupation": "Updated Occupation",
  "PhoneNumber": "111-222-3333",
  "Email": "updated.email@example.com"
}
Click Send to update the customer.
DELETE Request:

Set the request type to DELETE.
Enter the URL: http://localhost:3000/api/customers/1.
Click Send to delete the customer with ID 1.
10. Testing and Debugging
Use the console logs in your Node.js application to debug and ensure everything is working correctly.
Check Postman for the responses from your API requests.
Conclusion
You have successfully set up a Node.js project with SQL Server integration, created a REST API, and used Postman to interact with your API. This guide can be used as a reference for similar projects in the future.